name: Build and push CourseService

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "delta-dev"
  APP_NAME: "course-service" # Updated to follow naming conventions

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and push image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
        openshift_token: ${{ env.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}

    - name: Deploy course-service
      run: |
        echo "Checking if deployment for ${APP_NAME} exists..."
        if ! oc get deploymentconfigs.apps.openshift.io ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} 2>/dev/null; then
          echo "DeploymentConfig for ${APP_NAME} not found. Creating a new one..."
          oc create deploymentconfig ${{ env.APP_NAME }} --image=your-registry-path/${{ env.APP_NAME }}:latest -n ${{ env.OPENSHIFT_NAMESPACE }}
        else
          echo "DeploymentConfig for ${APP_NAME} already exists."
        fi

    - name: Rollout and verify course-service
      run: |
        echo "Starting rollout for ${APP_NAME}..."
        oc rollout latest ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}

        echo "Waiting for the pod to be in 'Running' state..."
        for i in {1..12}; do
          POD_STATUS=$(oc get pods -n ${{ env.OPENSHIFT_NAMESPACE }} -l app=${{ env.APP_NAME }} -o jsonpath="{.items[0].status.phase}" 2>/dev/null)
          if [ "$POD_STATUS" == "Running" ]; then
            echo "Pod is running!"
            break
          fi
          echo "Pod not ready yet. Retrying in 10 seconds..."
          sleep 10
        done

        if [ "$POD_STATUS" != "Running" ]; then
          echo "Error: Pod did not reach 'Running' state within the expected time."
          exit 1
        fi

        echo "Deployment successful and pod is running."
