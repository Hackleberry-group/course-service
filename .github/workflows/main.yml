name: Build and push CourseService

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "delta-dev"
  APP_NAME: "course-service"

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build, Push Image, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install oc
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 4

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ env.OPENSHIFT_SERVER }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/course-service:latest -f CourseServiceAPI/Dockerfile .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/course-service:latest

      - name: Deploy course-service
        run: |
          echo "Checking if namespace ${OPENSHIFT_NAMESPACE} exists..."
          if ! oc get namespace ${OPENSHIFT_NAMESPACE} >/dev/null 2>&1; then
            echo "Namespace ${OPENSHIFT_NAMESPACE} does not exist. Creating it..."
            oc create namespace ${OPENSHIFT_NAMESPACE}
          fi

          echo "Checking if DeploymentConfig for ${APP_NAME} exists..."
          if ! oc get deploymentconfig ${APP_NAME} -n ${OPENSHIFT_NAMESPACE} >/dev/null 2>&1; then
            echo "Creating DeploymentConfig for ${APP_NAME}..."
            oc create deploymentconfig ${APP_NAME} --image=${{ secrets.DOCKER_USERNAME }}/course-service:latest -n ${OPENSHIFT_NAMESPACE}
          else
            echo "DeploymentConfig for ${APP_NAME} already exists. Updating the image..."
            oc set image deploymentconfig/${APP_NAME} ${APP_NAME}=${{ secrets.DOCKER_USERNAME }}/course-service:latest -n ${OPENSHIFT_NAMESPACE}
          fi

      - name: Rollout and verify course-service
        run: |
          echo "Starting rollout for ${APP_NAME}..."
          CURRENT_STATUS=$(oc rollout status deploymentconfig/${APP_NAME} -n ${OPENSHIFT_NAMESPACE} 2>&1)
          
          if [[ "$CURRENT_STATUS" == *"is already in progress"* ]]; then
            echo "Rollout is already in progress. Monitoring its status..."
          else
            oc rollout latest ${APP_NAME} -n ${OPENSHIFT_NAMESPACE}
          fi

          echo "Waiting for the rollout to complete..."
          oc rollout status deploymentconfig/${APP_NAME} -n ${OPENSHIFT_NAMESPACE} || {
            echo "Error: Rollout did not complete successfully."
            exit 1
          }

          echo "Waiting for the pod to reach the 'Running' state..."
          for i in {1..12}; do
            POD_STATUS=$(oc get pods -n ${OPENSHIFT_NAMESPACE} -l deploymentconfig=${APP_NAME} -o jsonpath="{.items[0].status.phase}" 2>/dev/null)
            if [ "$POD_STATUS" == "Running" ]; then
              echo "Pod is running!"
              break
            elif [ "$POD_STATUS" == "CrashLoopBackOff" ]; then
              echo "Pod is in CrashLoopBackOff state. Fetching logs and describing the pod..."
              oc logs -l deploymentconfig=${APP_NAME} -n ${OPENSHIFT_NAMESPACE}
              oc describe pod -l deploymentconfig=${APP_NAME} -n ${OPENSHIFT_NAMESPACE}
              exit 1
            fi
            echo "Pod not ready yet. Retrying in 10 seconds..."
            sleep 10
          done

          if [ "$POD_STATUS" != "Running" ]; then
            echo "Error: Pod did not reach 'Running' state within the expected time."
            exit 1
          fi

          echo "Deployment successful and pod is running!"
